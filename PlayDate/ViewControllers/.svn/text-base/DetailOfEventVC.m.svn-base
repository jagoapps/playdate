//
//  DetailOfEventVC.m
//  PlayDate
//
//  Created by iApp on 16/06/14.
//  Copyright (c) 2014 iAppTechnologies. All rights reserved.
//

#import "DetailOfEventVC.h"
#import "PDWebHandler.h"
#import "PDRequestArrangeViewController.h"
#import "UIImageView+WebCache.h"
#import "PDCalenderViewController.h"
#import "PDMainViewController.h"
@interface DetailOfEventVC ()
-(IBAction)menuArrange:(id)sender;
-(IBAction)menuCalender:(id)sender;
-(IBAction)menuHome:(id)sender;
@end

@implementation DetailOfEventVC

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}
-(void)viewDidAppear:(BOOL)animated
{
    [[PDAppDelegate sharedDelegate] showActivityWithTitle:@"Saving..."];
    [self performSelector:@selector(activityDidAppear) withObject:nil afterDelay:0.1];
}
- (void)viewDidLoad
{
    [super viewDidLoad];
    NSLog(@"%@",self.dictSlected_EventInfo);
    
    self.view.backgroundColor = [[PDHelper sharedHelper] applicationBackgroundColor];
    
    
    txtPlayerName1.text =[[self.dictSlected_EventInfo valueForKey:@"child_name"]uppercaseString];
    txtPlayerName2.text =[[self.dictSlected_EventInfo valueForKey:PDWebFriendName]uppercaseString ];
    txtWhere.text=  [[self.dictSlected_EventInfo valueForKey:PDWebLocation]uppercaseString];
    txtWhen.text=  [[self.dictSlected_EventInfo valueForKey:PDWebDate]uppercaseString];
    if (self.fromCalendar)
            txtTime.text= [NSString stringWithFormat:@"%@-%@",[self.dictSlected_EventInfo valueForKey:@"starttime"],[self.dictSlected_EventInfo valueForKey:PDWebEndTime]];
    
    
    else
        txtTime.text= [NSString stringWithFormat:@"%@-%@",[self.dictSlected_EventInfo valueForKey:@"Starttime"],[self.dictSlected_EventInfo valueForKey:PDWebEndTime]];

    
    
    
   NSString *strNotes=  [[self.dictSlected_EventInfo valueForKey:PDWebNotes] uppercaseString];
    lblNotes.text=strNotes;
    [lblNotes sizeToFit];
    
    CGRect rect = lblNotes.frame;
    
    if (rect.size.height <= 30.0)
    {
        rect.size.height = 30.0;
        lblNotes.frame = rect;
        
        rect = vwNotes.frame;
        rect.size.height = 40.0;
        vwNotes.frame = rect;
    }

  else
  {
    CGRect rectvwNotes=  vwNotes .frame;
    rectvwNotes.size.height=CGRectGetMaxY(lblNotes.frame)+5;
    vwNotes.frame=rectvwNotes;

  }
    
 //  CGSize maximumLabelSize = CGSizeMake(150,MAXFLOAT);
//    CGSize expectedLabelSize = [strNotes sizeWithFont:lblNotes.font
//                                  constrainedToSize:maximumLabelSize
//                                      lineBreakMode:lblNotes.lineBreakMode];
//    CGRect frm=lblNotes.frame;
//    frm.size.height = expectedLabelSize.height+10;
//    lblNotes.frame=frm;
    
 
    
    CGRect rectVwButtons=  vwButtons .frame;
    rectVwButtons.origin.y=CGRectGetMaxY(vwNotes.frame)+30;
    vwButtons.frame=rectVwButtons;
    
   
    
    
    
    
    
    
   NSString *strStartTime1=  [self.dictSlected_EventInfo valueForKey:@"Starttime1"];
    if (strStartTime1.length!=0)
    {
        vw1when1.hidden=NO;
        vw1Time1.hidden=NO;
        lblAlternative1.hidden=NO;
        txtWhen1.text=  [[self.dictSlected_EventInfo valueForKey:PDWebDate]uppercaseString];
        txtTime1.text= [NSString stringWithFormat:@"%@-%@",[self.dictSlected_EventInfo valueForKey:@"Starttime1"],[self.dictSlected_EventInfo valueForKey:PDWebEndTime1]];
        CGRect rectVwButtons=  vwButtons .frame;
        rectVwButtons.origin.y=CGRectGetMaxY(vw1Time1.frame)+30;
        vwButtons.frame=rectVwButtons;


    }
    NSString *strStartTime2=  [self.dictSlected_EventInfo valueForKey:@"Starttime2"];
    if (strStartTime2.length!=0)
    {
        vw2when2.hidden=NO;
        vw2Time2.hidden=NO;
        lblAlternative2.hidden=NO;
        txtWhen2.text=  [[self.dictSlected_EventInfo valueForKey:PDWebDate]uppercaseString];
        txtTime2.text= [NSString stringWithFormat:@"%@-%@",[self.dictSlected_EventInfo valueForKey:@"Starttime2"],[self.dictSlected_EventInfo valueForKey:PDWebEndTime2]];
        
        
        
        CGRect rectVwButtons=  vwButtons .frame;
        rectVwButtons.origin.y=CGRectGetMaxY(vw2Time2.frame)+30;
        vwButtons.frame=rectVwButtons;

        

    }

    NSString *strStartTime3=  [self.dictSlected_EventInfo valueForKey:@"Starttime3"];
    if (strStartTime3.length!=0)
    {
        vw3when3.hidden=NO;
        vw3Time3.hidden=NO;
        lblAlternative3.hidden=NO;
        
        txtWhen3.text=  [[self.dictSlected_EventInfo valueForKey:PDWebDate]uppercaseString];
        txtTime3.text= [NSString stringWithFormat:@"%@-%@",[self.dictSlected_EventInfo valueForKey:@"Starttime3"],[self.dictSlected_EventInfo valueForKey:PDWebEndTime3]];
        
        CGRect rectVwButtons=  vwButtons .frame;
        rectVwButtons.origin.y=CGRectGetMaxY(vw3Time3.frame)+30;
        vwButtons.frame=rectVwButtons;
    }
NSLog(@"%@",[self.dictSlected_EventInfo  objectForKey:@"status"]);
       if ([[self.dictSlected_EventInfo  objectForKey:@"status"] isEqualToString:@"accepted"]||self.fromCalendar)
           vwButtons.hidden=YES;
 
    
    NSString *strSender_id=[self.dictSlected_EventInfo  objectForKey:@"senderid"];
    NSString *strGid = [[[[PDUser currentUser] detail] objectForKey:PDUserInfo]objectForKey:PDWebGID];

    if ([strSender_id isEqualToString:strGid])
        vwButtons.hidden=YES;
    
    if (vwButtons.hidden==YES)
            [scrollView setContentSize:CGSizeMake(scrollView.frame.size.width, CGRectGetMaxY(vwButtons.frame)-40)];

    
    else
    [scrollView setContentSize:CGSizeMake(scrollView.frame.size.width, CGRectGetMaxY(vwButtons.frame) + 60.0)];

    [self setUpViewContents];
 
    
    // Do any additional setup after loading the view from its nib.
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
#pragma mark self methos
- (void)activityDidAppear
{
  
    __block UIImageView *iV = imgPlayer2;
    __block NSDictionary *dict = self.dictSlected_EventInfo;
    
    [imgPlayer1 setImageWithURL:[NSURL URLWithString:[ self.dictSlected_EventInfo objectForKey:PDWebProfileImage]] placeholderImage:[UIImage imageNamed:@"user_img"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {
        
        if (!error)
        {
            [iV setImageWithURL:[NSURL URLWithString:[dict objectForKey:PDWebFriendProfileImage]] placeholderImage:[UIImage imageNamed:@"user_img"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {
                
                if (!error)
                {
                    
                    
                }
                else {
                   
                }
                
                 [[PDAppDelegate sharedDelegate] hideActivity];
                
            }];


        }
        else {
            [iV setImageWithURL:[NSURL URLWithString:[dict objectForKey:PDWebFriendProfileImage]] placeholderImage:[UIImage imageNamed:@"user_img"] completed:^(UIImage *image, NSError *error, SDImageCacheType cacheType) {
                
                if (!error)
                {
                    
                    
                }
                else {
                    
                }
                
                [[PDAppDelegate sharedDelegate] hideActivity];
                
            }];

        }
        
    }];
   

}
-(void)setUpViewContents
{
    CGRect rect;
    
    CGFloat totalHeight = [UIScreen mainScreen].bounds.size.height;
    if (![[PDHelper sharedHelper] isIOS7]){
        totalHeight -= 20.0;
    }
    else
    {
        for (UIView *subView in self.view.subviews) {
            if ([subView isKindOfClass:[UIView class]]) {
                rect = subView.frame;
                rect.origin.y += 20.0;
                subView.frame = rect;
            }
        }
    }
    
    
   }
-(void)accepted
{
    
    
    
    NSDictionary *params = @{@"event_id" :[self.dictSlected_EventInfo objectForKey:@"Eventid"],
                             @"status": @"accepted"};
    
    
    [[PDWebHandler sharedWebHandler] event_Accepted_RejectedEvent:params];
        [[PDWebHandler sharedWebHandler] startRequestWithCompletionBlock:^(id response, NSError *error) {
        
        [[PDAppDelegate sharedDelegate] hideActivity];
            [self .navigationController popViewControllerAnimated:YES];


    }];
    
    
    //http://112.196.34.179/playdate/event_accept_or_reject.php?event_id=57&status=accepted
}
-(void)rejcted
{    //http://112.196.34.179/playdate/event_accept_or_reject.php?event_id=64&status=rejected
    
    
    NSDictionary *params = @{@"event_id" :[self.dictSlected_EventInfo objectForKey:@"Eventid"],
                             @"status": @"rejected"};
    
    
    [[PDWebHandler sharedWebHandler] event_Accepted_RejectedEvent:params];
    [[PDWebHandler sharedWebHandler] startRequestWithCompletionBlock:^(id response, NSError *error) {
        
        [[PDAppDelegate sharedDelegate] hideActivity];
        [self .navigationController popViewControllerAnimated:YES];
        
    }];


}
#pragma mark iBoutlets
-(IBAction)btnActionRejcted
{
    
    [[PDAppDelegate sharedDelegate] showActivityWithTitle:@"Rejecting Request..."];
    [self performSelector:@selector(rejcted) withObject:nil afterDelay:0.1];

}

-(IBAction)btnActionAccepted
{
    [[PDAppDelegate sharedDelegate] showActivityWithTitle:@"Accepting Request..."];
    [self performSelector:@selector(accepted) withObject:nil afterDelay:0.1];

}

-(IBAction)homeAction:(id)sender
{
   //[self.menuContainerViewController ]
}
-(IBAction)calendarAction:(id)sender
{
}
-(IBAction)arrangeAction:(id)sender
{
}


-(IBAction)btnActionEdit
{
    PDRequestArrangeViewController *objPDRequestArrangeViewController=[[PDRequestArrangeViewController alloc]initWithNibName:@"PDRequestArrangeViewController" bundle:nil];
    objPDRequestArrangeViewController.dictEventInfo_edit=self.dictSlected_EventInfo;
    [self.navigationController pushViewController:objPDRequestArrangeViewController animated:YES];
    
}

#pragma mark - Button Actions
-(IBAction)menuAction:(id)sender
{
    [self.menuContainerViewController toggleLeftSideMenuCompletion:^{
        
        
        
    }];
}
-(IBAction)menuArrange:(id)sender
{
    PDRequestArrangeViewController *arrangeViewController = [[PDRequestArrangeViewController alloc]initWithNibName:@"PDRequestArrangeViewController" bundle:nil];
    UINavigationController *navigationController = self.menuContainerViewController.centerViewController;
    NSArray *controllers = [NSArray arrayWithObject:arrangeViewController];
    navigationController.viewControllers = controllers;
    [self.menuContainerViewController setMenuState:MFSideMenuStateClosed];
    
}
-(IBAction)menuCalender:(id)sender
{
    PDCalenderViewController *calendarViewController = [[PDCalenderViewController alloc]initWithNibName:@"PDCalenderViewController" bundle:nil];
    UINavigationController *navigationController = self.menuContainerViewController.centerViewController;
    NSArray *controllers = [NSArray arrayWithObject:calendarViewController];
    navigationController.viewControllers = controllers;
    [self.menuContainerViewController setMenuState:MFSideMenuStateClosed];
}
-(IBAction)menuHome:(id)sender
{
    PDMainViewController *mainViewController = [[PDMainViewController alloc] initWithNibName:@"PDMainViewController" bundle:nil];
    
    UINavigationController *navigationController = self.menuContainerViewController.centerViewController;
    NSArray *controllers = [NSArray arrayWithObject:mainViewController];
    navigationController.viewControllers = controllers;
    [self.menuContainerViewController setMenuState:MFSideMenuStateClosed];
}
@end
